import disnake
import random
import datetime

from disnake.ext import commands
from utils import main, enums, constant, database
from utils import CustomError
from helpers.mod_helper import ModerationHelper


class Moderation(commands.Cog, name="üëÆüèª –ú–æ–¥–µ—Ä–∞—Ü–∏—è"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.main = main.MainSettings()
        self.color = enums.Color()
        self.otheremojis = constant.OtherEmojis()
        self.db = database.DataBase()
        self.enum = enums.Enum()

    @commands.slash_command(
        name=disnake.Localized("timeout", key="MUTE_COMMAND_NAME"),
        description=disnake.Localized(
            "Sends a user to timeout.", key="MUTE_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(moderate_members=True)
    @commands.bot_has_permissions(moderate_members=True)
    # @commands.default_member_permissions(moderate_members=True)
    async def timeout(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
        time: str = commands.Param(
            name=disnake.Localized("time", key="MUTE_COMMAND_TEXT_NAME"),
            description=disnake.Localized(
                "Specify the time (Example: 10m, where s - seconds, m - minutes, h - hours, d - days).",
                key="MUTE_COMMAND_TEXT_DESCRIPTION",
            ),
        ),
        reason: str = commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            name=disnake.Localized("reason", key="TARGET_REASON_NAME"),
            description=disnake.Localized(
                "State the reason.", key="TARGET_REASON_DESCRIPTION"
            ),
        ),
    ):
        d = time[-1:]
        timemute = int(time[:-1])

        if member == self.bot.user:
            raise CustomError(
                f"‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–≤—ã–¥–∞–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–∞—Ç–∞** {self.bot.user.mention}!"
            )

        elif member == inter.author:
            raise CustomError(
                "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–≤—ã–¥–∞–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–∞—Ç–∞** —Å–∞–º–æ–º—É —Å–µ–±–µ!"
            )

        elif member.top_role >= inter.author.top_role:
            raise CustomError(
                "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é!"
            )

        elif member.top_role >= inter.guild.me.top_role:
            raise CustomError(
                "‚ùå –†–æ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!"
            )

        elif member.current_timeout:
            raise CustomError(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–∞–π–º-–∞—É—Ç–µ!")

        elif member.bot:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!")

        if d == "s" or d == "—Å":
            if timemute > 2419000:
                raise CustomError(
                    "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ **28 –¥–Ω–µ–π**!"
                )

            return await ModerationHelper.check_time_muted(
                self, inter, member, time, reason, send_to_member=True
            )

        elif d == "m" or d == "–º" or d == "—Ö":
            if timemute > 40320:
                raise CustomError(
                    "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ **28 –¥–Ω–µ–π**!"
                )

            return await ModerationHelper.check_time_muted(
                self, inter, member, time, reason, send_to_member=True
            )

        elif d == "h" or d == "—á" or d == "–≥":
            if timemute > 672:
                raise CustomError(
                    "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ **28 –¥–Ω–µ–π**!"
                )

            return await ModerationHelper.check_time_muted(
                self, inter, member, time, reason, send_to_member=True
            )

        elif d == "d" or d == "–¥":
            if timemute > 28:
                raise CustomError(
                    "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ **28 –¥–Ω–µ–π**!"
                )

            return await ModerationHelper.check_time_muted(
                self, inter, member, time, reason, send_to_member=True
            )

    @commands.slash_command(
        name=disnake.Localized("untimeout", key="UNMUTE_COMMAND_NAME"),
        description=disnake.Localized(
            "Removes timeout from the user.", key="UNMUTE_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(moderate_members=True)
    @commands.bot_has_permissions(moderate_members=True)
    # @commands.default_member_permissions(moderate_members=True)
    async def untimeout(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
        reason: str = commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            name=disnake.Localized("reason", key="TARGET_REASON_NAME"),
            description=disnake.Localized(
                "State the reason.", key="TARGET_REASON_DESCRIPTION"
            ),
        ),
    ):
        if member.current_timeout == None:
            raise CustomError("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–∞–π–º-–∞—É—Ç–µ!")

        elif member.top_role >= inter.author.top_role:
            raise CustomError(
                "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é!"
            )

        elif member.top_role >= inter.guild.me.top_role:
            raise CustomError(
                "‚ùå –†–æ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!"
            )

        elif member.bot:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!")

        return await ModerationHelper.send_embed_punishment(
            self,
            inter,
            member,
            reason,
            punish=f"‚úÖ –° —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention} —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è! üêµ",
            dm_punish=f"–í–∞–º –±—ã–ª–∏ —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ `{inter.guild.name}`!",
            send_to_member=True,
        )

    @commands.slash_command(
        name=disnake.Localized("kick", key="KICK_COMMAND_NAME"),
        description=disnake.Localized(
            "Kicks the specified user from the server with the possibility of returning.",
            key="KICK_COMMAND_DESCRIPTION",
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(kick_members=True)
    @commands.bot_has_permissions(kick_members=True)
    # @commands.default_member_permissions(kick_members=True)
    async def kick(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
        reason: str = commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            name=disnake.Localized("reason", key="TARGET_REASON_NAME"),
            description=disnake.Localized(
                "State the reason.", key="TARGET_REASON_DESCRIPTION"
            ),
        ),
    ):
        if member == self.bot.user:
            raise CustomError(f"‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–∫–∏–∫–Ω—É—Ç—å** {self.bot.user.mention}!")

        elif member == inter.author:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–∫–∏–∫–Ω—É—Ç—å** —Å–∞–º–æ–º—É —Å–µ–±–µ!")

        elif member.top_role >= inter.author.top_role:
            raise CustomError(
                "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é!"
            )

        elif member.top_role >= inter.guild.me.top_role:
            raise CustomError(
                "‚ùå –†–æ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!"
            )

        elif member.bot:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!")

        return await ModerationHelper.send_embed_punishment(
            self,
            inter,
            member,
            reason,
            punish=f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –±—ã–ª –∏–∑–≥–Ω–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.",
            dm_punish=f"–í—ã –±—ã–ª–∏ –∏–∑–≥–Ω–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ `{inter.guild.name}`!",
            send_to_member=True,
        )

    @commands.slash_command(
        name=disnake.Localized("ban", key="BAN_COMMAND_NAME"),
        description=disnake.Localized(
            "Banishes the specified user from the server permanently.",
            key="BAN_COMMAND_DESCRIPTION",
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    # @commands.default_member_permissions(ban_members=True)
    async def ban(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
        reason: str = commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            name=disnake.Localized("reason", key="TARGET_REASON_NAME"),
            description=disnake.Localized(
                "State the reason.", key="TARGET_REASON_DESCRIPTION"
            ),
        ),
    ):
        if member == self.bot.user:
            raise CustomError(
                f"‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–≤—ã–¥–∞–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É** {self.bot.user.mention}!"
            )

        elif member == inter.author:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–≤—ã–¥–∞–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É** —Å–∞–º–æ–º—É —Å–µ–±–µ!")

        elif member.top_role >= inter.author.top_role:
            raise CustomError(
                "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é!"
            )

        elif member.top_role >= inter.guild.me.top_role:
            raise CustomError(
                "‚ùå –†–æ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!"
            )

        elif member.bot:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!")

        return await ModerationHelper.send_embed_punishment(
            self,
            inter,
            member,
            reason,
            punish=f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.",
            dm_punish=f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ `{inter.guild.name}`!",
            send_to_member=True,
        )

    async def autocomplete_unban(
        self, inter: disnake.ApplicationCommandInteraction, string: str
    ):
        return [
            disnake.OptionChoice(
                name=f"{ban.user.name} ({ban.user.id})", value=str(ban.user.id)
            )
            async for ban in inter.guild.bans(limit=200)
        ]

    @commands.slash_command(
        name=disnake.Localized("unban", key="UNBAN_COMMAND_NAME"),
        description=disnake.Localized(
            "Unbans the specified user on the server by his ID, name or tag.",
            key="UNBAN_COMMAND_DESCRIPTION",
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    # @commands.default_member_permissions(ban_members=True)
    async def unban(
        self,
        inter: disnake.ApplicationCommandInteraction,
        user: disnake.User = commands.Param(
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
            autocomplete=autocomplete_unban,
        ),
        reason: str = commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            name=disnake.Localized("reason", key="TARGET_REASON_NAME"),
            description=disnake.Localized(
                "State the reason.", key="TARGET_REASON_DESCRIPTION"
            ),
        ),
    ):
        if user == self.bot.user:
            raise CustomError(
                f"‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–≤—ã–¥–∞–≤–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É** {self.bot.user.mention}!"
            )

        elif user == inter.author:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–≤—ã–¥–∞–≤–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É** —Å–∞–º–æ–º—É —Å–µ–±–µ!")

        elif user.bot:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!")

        try:
            await inter.response.defer(ephemeral=False)
            await inter.guild.fetch_ban(user)
            await inter.guild.unban(user=user, reason=reason)

            embed = disnake.Embed(
                description=f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {user.mention} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.",
                color=self.color.MAIN,
                timestamp=inter.created_at,
            )
            embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=inter.author.mention)
            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason)

            embed.set_thumbnail(url=user.display_avatar.url)
            embed.set_footer(
                text="–ö–æ–º–∞–Ω–¥–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Discord —Å–µ—Ä–≤–µ—Ä–∞",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
            await inter.edit_original_message(embed=embed)
        except:
            raise CustomError(
                f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ **{user.mention}** –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!"
            )

    @commands.slash_command(
        name=disnake.Localized("delay", key="DELAY_CHAT_COMMAND_NAME"),
        description=disnake.Localized(
            "Sets a delay for chatting.", key="DELAY_CHAT_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(manage_channels=True)
    @commands.bot_has_permissions(manage_channels=True)
    # @commands.default_member_permissions(manage_channels=True)
    async def setdelay(
        self,
        inter: disnake.ApplicationCommandInteraction,
        seconds: int = commands.Param(
            name=disnake.Localized("seconds", key="DELAY_CHAT_COMMAND_TEXT_NAME"),
            description=disnake.Localized(
                "Specify the delay time in seconds.",
                key="DELAY_CHAT_COMMAND_TEXT_DESCRIPTION",
            ),
        ),
    ):
        if 0 > seconds:
            raise CustomError(
                f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è!"
            )
            
        if seconds == 0:
            await inter.response.defer(ephemeral=False)
            await inter.channel.edit(slowmode_delay=seconds)
            embed = disnake.Embed(
                description=f"{inter.author.mention} —É–±—Ä–∞–ª –∑–∞–¥–µ—Ä–∂–∫—É –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!",
                color=self.color.MAIN,
                timestamp=inter.created_at,
            )
            embed.set_author(
                name="–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ", icon_url=inter.author.display_avatar.url
            )
            embed.set_footer(
                text="–ö–æ–º–∞–Ω–¥–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Discord —Å–µ—Ä–≤–µ—Ä–∞",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
            await inter.edit_original_message(embed=embed)
        else:
            await inter.response.defer(ephemeral=False)
            await inter.channel.edit(slowmode_delay=seconds)
            embed = disnake.Embed(
                description=f"{inter.author.mention} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É —á–∞—Ç–∞ –≤ **`{seconds}`** —Å–µ–∫—É–Ω–¥!",
                color=self.color.MAIN,
                timestamp=inter.created_at,
            )
            embed.set_author(
                name="–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ", icon_url=inter.author.display_avatar.url
            )
            embed.set_footer(
                text="–ö–æ–º–∞–Ω–¥–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Discord —Å–µ—Ä–≤–µ—Ä–∞",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
            await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("clear", key="CLEAR_COMMAND_NAME"),
        description=disnake.Localized(
            "Clears a specified number of messages in a channel.",
            key="CLEAR_COMMAND_DESCRIPTION",
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(manage_messages=True)
    @commands.bot_has_permissions(manage_messages=True)
    # @commands.default_member_permissions(manage_messages=True)
    async def clear(
        self,
        inter: disnake.ApplicationCommandInteraction,
        amount: int = commands.Param(
            name=disnake.Localized("quantity", key="CLEAR_COMMAND_TEXT_NAME"),
            description=disnake.Localized(
                "Specify the number of messages.", key="CLEAR_COMMAND_TEXT_DESCRIPTION"
            ),
        ),
    ):
        await inter.response.defer(ephemeral=True)
        clear_amount = self.enum.format_large_number(amount)
        embed = disnake.Embed(
            description=f"{inter.author.mention}, –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ **{clear_amount}** —Å–æ–æ–±—â–µ–Ω–∏–π(–µ)",
            color=self.color.MAIN,
        )
        embed.set_author(name="–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞", icon_url=inter.author.display_avatar.url)
        embed.set_footer(text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR)
        await inter.channel.purge(limit=int(amount))
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("warn", key="GIVE_WARN_COMMAND_NAME"),
        description=disnake.Localized(
            "Issue a warning to the user.", key="GIVE_WARN_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    # @commands.default_member_permissions(ban_members=True)
    async def give_warn(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
        reason: str = commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            name=disnake.Localized("reason", key="TARGET_REASON_NAME"),
            description=disnake.Localized(
                "State the reason.", key="TARGET_REASON_DESCRIPTION"
            ),
        ),
    ):
        if member == self.bot.user:
            raise CustomError(
                f"‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è** {self.bot.user.mention}!"
            )

        elif member == inter.author:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å **–≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è** —Å–∞–º–æ–º—É —Å–µ–±–µ!")

        elif member.top_role >= inter.author.top_role:
            raise CustomError(
                "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é!"
            )

        elif member.top_role >= inter.guild.me.top_role:
            raise CustomError(
                "‚ùå –†–æ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!"
            )

        elif member.bot:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!")

        warns = await self.db.get_warns(member)
        warnnum = 0
        if warns:
            for table in warns:
                warnnum += 1

        if warnnum == 3:
            await self.db.remove_warns(member=member)
            await ModerationHelper.send_embed_punishment(
                self,
                inter,
                member,
                reason="3/3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
                punish=f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.",
                dm_punish=f"–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ `{inter.guild.name}`!",
                send_to_member=True,
            )
        else:
            return await ModerationHelper.send_embed_punishment(
                self,
                inter,
                member,
                reason,
                punish=f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!",
                dm_punish=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ `{inter.guild.name}`!",
                send_to_member=True,
            )

    @commands.slash_command(
        name=disnake.Localized("warns", key="WARNS_COMMAND_NAME"),
        description=disnake.Localized(
            "Displays all warnings issued to the user.", key="WARNS_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def member_warns(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author,
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
    ):
        if not member:
            member = inter.author

        elif member.bot:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!")

        await inter.response.defer(ephemeral=False)
        warns = await self.db.get_warns(member)
        embed = disnake.Embed(color=self.color.MAIN)
        embed.set_author(
            name=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {member.display_name}",
            icon_url=member.display_avatar.url,
        )
        embed.set_thumbnail(url=member.display_avatar.url)

        if warns:
            warnnum = 0
            for table in warns:
                warnnum += 1
                reason = table[0]
                timestamp = disnake.utils.format_dt(table[1], style="f")
                warner = inter.guild.get_member(table[2])
                embed.add_field(
                    name=f"`–ü—Ä–µ–¥ #{warnnum}`",
                    value=f"**–í—ã–¥–∞–ª:** {warner.mention} | **–î–∞—Ç–∞:** {timestamp}\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}",
                    inline=False,
                )
        else:
            embed.description = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("remwarn", key="REMOVE_WARNS_COMMAND_NAME"),
        description=disnake.Localized(
            "Removes all warnings issued to the user.",
            key="REMOVE_WARNS_COMMAND_DESCRIPTION",
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(ban_members=True)
    @commands.bot_has_permissions(ban_members=True)
    # @commands.default_member_permissions(ban_members=True)
    async def remove_member_warns(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author,
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
    ):
        await inter.response.defer(ephemeral=False)
        if not member:
            member = inter.author

        elif member.bot:
            raise CustomError("‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!")

        await self.db.remove_warns(member=member)
        embed = disnake.Embed(
            description=f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {member.mention} –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.",
            color=self.color.MAIN,
        )
        embed.set_author(
            name=f"–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", icon_url=member.display_avatar.url
        )
        await inter.edit_original_message(embed=embed)


def setup(bot):
    bot.add_cog(Moderation(bot))
