import disnake
import random
import aiohttp

from disnake.ext import commands
from utils import constant, main, enums, CustomError
from bs4 import BeautifulSoup
from typing import Optional, Union
from helpers.fun_helper import MineswiperView
from itertools import repeat
from services import waifu_pics
from io import BytesIO
from googletrans import Translator


async def translator(word, lang):
    return Translator().translate(word, dest=lang).text


class Fun(commands.Cog, name="üòÑ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.main = main.MainSettings()
        self.eightball = constant.EightBall()
        self.color = enums.Color()

    NSFW_DESCRIPTIONS = {
        "–ó–∞–¥–Ω–∏—Ü—ã": "ass",
        "–ë–î–°–ú": "bdsm",
        "–ö–∞–º)": "cum",
        "–î–µ–≤—É—à–∫–∏-–¥–æ–º–∏–Ω–∞—Ç–æ—Ä—ã": "femdom",
        "–•–µ–Ω—Ç–∞–π": "hentai",
        "–ò–Ω—Ü–µ—Å—Ç": "incest",
        "–ú–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è": "masturbation",
        "–≠—Ä–æ—Ç–∏–∫–∞": "ero",
        "–û—Ä–≥–∏—è": "orgy",
        "–Æ—Ä–∏": "yuri",
        "–¢—Ä—É—Å–∏–∫–∏": "pantsu",
        "–û—á–∫–æ (–æ—á–∫–∏)": "glasses",
        "–†–∞–±–æ—Ç–∞ —Ä—É—á–∫–∞–º–∏": "handjob",
        "–ë–ª–æ—É–¥–∂–æ–±": "blowjob",
        "–†–∞–±–æ—Ç–∞ –≥—Ä—É–¥—å—é": "boobjob",
        "–ü—Ä–æ—Å—Ç–æ –≥—Ä—É–¥—å": "boobs",
        "–ù–æ–∂–∫–∏": "footjob",
        "–ï—â—ë –±–æ–ª—å—à–µ —Ö–µ–Ω—Ç–∞—è": "gif",
        "–ê—Ö–µ–≥–∞–æ": "ahegao",
        "–®–∫–æ–ª—å–Ω–∏—Ü—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ...": "uniform",
        "–©—É–ø–∞–ª—å—Ü–∞": "tentacles",
        "–ë—ë–¥—Ä–∞": "thighs",
        "–ö–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∏": "nsfwNeko",
        "–Æ–±–æ—á–∫–∏": "zettaiRyouiki",
    }

    ANIME_GIRLS = {
        "–ú–µ–≥—É–º–∏–Ω": "megumin",
        "–®–∏–Ω–æ–±—É": "shinobu",
        "–ê–≤–∞–≤–æ": "awoo",
        "–ù–µ–∫–æ": "neko",
        "–ü–æ–∫–µ": "poke",
        "–†–∞–Ω–¥–æ–º –≤–∞–π—Ñ—É": "waifu",
    }

    RP_DESCRIPTIONS = {
        "pat": "{author} –ø–æ–≥–ª–∞–¥–∏–ª(-–∞) {user}",
        "hug": "{author} –æ–±–Ω—è–ª(-–∞) {user}",
        "kiss": "{author} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) {user}",
        "lick": "{author} –æ–±–ª–∏–∑–Ω—É–ª(-–∞) {user}",
        "cuddle": "{author} –ø—Ä–∏–∂–∞–ª(-–∞) –∫ —Å–µ–±–µ {user}",
        "handhold": "{author} –≤–∑—è–ª(-–∞) –∑–∞ —Ä—É–∫—É {user}",
        "nom": "{author} –ø–æ–∫–æ—Ä–º–∏–ª(-–∞) {user}",
        "slap": "{author} –¥–∞–ª(-–∞) –ø–æ—â–µ—á–∏–Ω—É {user}",
        "bite": "{author} —Å–¥–µ–ª–∞–ª(-–∞) –∫—É—Å—å {user}",
        "highfive": "{author} –¥–∞–ª(-–∞) –ø—è—Ç—å {user}",
    }

    RP_DESCRIPTIONS_MYSELF = {
        "pat": "{author} –ø–æ–≥–ª–∞–¥–∏–ª(-–∞) —Å–µ–±—è",
        "hug": "{author} –æ–±–Ω—è–ª(-–∞) —Å–µ–±—è",
        "kiss": "{author} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) —Å–µ–±—è",
        "lick": "{author} –æ–±–ª–∏–∑–Ω—É–ª(-–∞) —Å–µ–±—è",
        "cuddle": "{author} –ø—Ä–∏–∂–∞–ª(-–∞) —Å–µ–±—è –∫ —Å–µ–±–µ",
        "handhold": "{author} –≤–∑—è–ª(-–∞) —Å–µ–±—è –∑–∞ —Ä—É–∫—É",
        "nom": "{author} –ø–æ–∫–æ—Ä–º–∏–ª(-–∞) —Å–µ–±—è",
        "slap": "{author} –¥–∞–ª(-–∞) —Å–µ–±–µ –ø–æ—â—ë—á–∏–Ω—É",
        "bite": "{author} —É–∫—É—Å–∏–ª(-–∞) —Å–µ–±—è",
        "highfive": "{author} –¥–∞–ª(-–∞) —Å–µ–±–µ –ø—è—Ç—å",
    }

    RP_DESCRIPTIONS_FISTASHKIN = {
        "pat": "{author} –ø–æ–≥–ª–∞–¥–∏–ª(-–∞) {user}",
        "hug": "{author} –æ–±–Ω—è–ª(-–∞) {user}",
        "kiss": "{author} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) {user}",
        "lick": "{author} –æ–±–ª–∏–∑–Ω—É–ª(-–∞) {user}",
        "cuddle": "{author} –ø—Ä–∏–∂–∞–ª(-–∞) –∫ —Å–µ–±–µ {user}",
        "handhold": "{author} –≤–∑—è–ª(-–∞) –∑–∞ —Ä—É–∫—É {user}",
        "nom": "{author} –ø–æ–∫–æ—Ä–º–∏–ª(-–∞) {user}",
        "slap": "{author} –Ω—É –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫ —Å–æ –º–Ω–æ–π :(",
        "bite": "{author} –∞–π... –ó–∞ —à–æ —Ç—ã —Ç–∞–∫ —Å–æ –º–Ω–æ–π?",
        "highfive": "{author} –¥–µ—Ä–∂–∏ –ø—è—Ç—é–Ω—é üñêÔ∏è",
    }

    @commands.slash_command(
        name=disnake.Localized("ball", key="EIGHT_BALL_COMMAND_NAME"),
        description=disnake.Localized(
            "Answers a users question.", key="EIGHT_BALL_COMMAND_DESCRIPTION"
        ),
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def ball(
        self,
        inter: disnake.ApplicationCommandInteraction,
        question=commands.Param(
            name=disnake.Localized("question", key="EIGHT_BALL_COMMAND_TEXT_NAME"),
            description=disnake.Localized(
                "Enter your question.", key="EIGHT_BALL_COMMAND_TEXT_DESCRIPTION"
            ),
        ),
    ):
        await inter.response.defer(ephemeral=False)
        embed = disnake.Embed(description=question, color=self.color.MAIN)
        embed.add_field(
            name="**–û—Ç–≤–µ—Ç: **",
            value=random.choice(self.eightball.RESPONSES),
            inline=False,
        )
        embed.set_author(name="üé± –ò–≥—Ä–∞ 8ball")
        embed.set_thumbnail(url=inter.author.display_avatar.url)
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("rp", key="RP_COMMAND_NAME"),
        description=disnake.Localized(
            "Interact with the user.", key="RP_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def rp(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author,
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
        choice: str = commands.Param(
            name=disnake.Localized("choice", key="RP_COMMAND_CHOICE_NAME"),
            description=disnake.Localized(
                "Choose what interaction you want to do.",
                key="RP_COMMAND_CHOICE_DESCRIPTION",
            ),
            choices=[disnake.OptionChoice(x, x) for x in RP_DESCRIPTIONS.keys()],
        ),
    ):
        await inter.response.defer(ephemeral=False)
        descriptions = (
            self.RP_DESCRIPTIONS
            if member != inter.author and member != inter.bot.user
            else self.RP_DESCRIPTIONS_MYSELF
            if member == inter.author
            else self.RP_DESCRIPTIONS_FISTASHKIN
        )
        embed = disnake.Embed(
            description=f"**{descriptions[choice].format(author=inter.author.display_name, user=member.display_name)}**",
            color=self.color.MAIN,
        )
        embed.set_image(url=await waifu_pics.get_image("sfw", choice))
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("nsfw", key="NSFW_COMMAND_NAME"),
        description=disnake.Localized(
            "Well... It was not bad.", key="NSFW_COMMAND_DESCRIPTION"
        ),
    )
    @commands.is_nsfw()
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def nsfw(
        self,
        inter: disnake.ApplicationCommandInteraction,
        choice: str = commands.Param(
            name=disnake.Localized("choice", key="NSFW_COMMAND_CHOICE_NAME"),
            description=disnake.Localized(
                "Choose something from the list.",
                key="NSFW_COMMAND_CHOICE_DESCRIPTION",
            ),
            choices=[disnake.OptionChoice(x, x) for x in NSFW_DESCRIPTIONS.keys()],
        ),
    ):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://hmtai.hatsunia.cfd/nsfw/{self.NSFW_DESCRIPTIONS.get(choice)}"
                ) as response:
                    data = await response.json()
        except:
            raise CustomError("‚ùå –û—à–∏–±–∫–∞ API!")

        await inter.response.defer(ephemeral=False)
        embed = disnake.Embed(color=self.color.MAIN)
        embed.set_image(url=data["url"])
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("anime-chan", key="ANIME_CHAN_COMMAND_NAME"),
        description=disnake.Localized(
            "Anime-chan!", key="ANIME_CHAN_COMMAND_DESCRIPTION"
        ),
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def anime_girl(
        self,
        inter: disnake.ApplicationCommandInteraction,
        choice: str = commands.Param(
            name=disnake.Localized("choice", key="ANIME_CHAN_CHOICE_NAME"),
            description=disnake.Localized(
                "Select the tag with anime-chan.", key="ANIME_CHAN_CHOICE_DESCRIPTION"
            ),
            choices=[disnake.OptionChoice(x, x) for x in ANIME_GIRLS.keys()],
        ),
    ):
        await inter.response.defer(ephemeral=False)
        embed = disnake.Embed(
            description=f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å **{choice.title()}**", color=self.color.MAIN
        )
        image = await waifu_pics.get_image("sfw", self.ANIME_GIRLS.get(choice))
        embed.set_image(url=image)
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("minesweeper", key="MINESWEEPER_COMMAND_NAME"),
        description=disnake.Localized(
            "Play minesweeper mini-game.", key="MINESWEEPER_COMMAND_DESCRIPTION"
        ),
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def mine(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        board = [["\u200b"] * 5] * 5
        bombs = 0
        bombpositions = []
        for x in repeat(None, random.randint(4, 11)):
            random_index = random.randint(0, 19)
            if random_index not in bombpositions and random_index not in [
                0,
                4,
                20,
                24,
            ]:
                bombpositions.append(random_index)
                bombs += 1

        def ExtractBlocks():
            new_b = []
            for x in board:
                for y in x:
                    new_b.append(y)
            return new_b

        view = MineswiperView(inter, ExtractBlocks(), bombpositions, board)
        message = await inter.edit_original_message(
            f"–í—Å–µ–≥–æ –±–æ–º–±: `{len(bombpositions)}`",
            view=view,
        )
        view.message = message

    @commands.slash_command(
        name=disnake.Localized("dice", key="ROLLDICE_COMMAND_NAME"),
        description=disnake.Localized(
            "Play a mini-game with rolling a dice.", key="ROLLDICE_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def roll_dice(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        dice_roll = random.randint(1, 6)

        embed = disnake.Embed(
            description=f"[`üé≤`] –ù–∞ –∫—É–±–∏–∫–µ –≤—ã–ø–∞–ª–∞ —Ü–∏—Ñ—Ä–∞: **{dice_roll}**",
            color=self.color.MAIN,
        )
        embed.set_author(name="üé≤ –ö–æ—Å—Ç–∏")
        embed.set_thumbnail(url=inter.author.display_avatar.url)
        embed.set_footer(text="üíù –û–ø, –æ–ø-–ª—è!")
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("animal", key="ANIMAL_COMMAND_NAME"),
        description=disnake.Localized(
            "It outputs a random photo of the chosen animal.",
            key="ANIMAL_COMMAND_DESCRIPTION",
        ),
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def animal(
        self,
        inter: disnake.ApplicationCommandInteraction,
        animal: str = commands.Param(
            name=disnake.Localized("choice", key="ANIMAL_CHOICE_NAME"),
            description=disnake.Localized(
                "Please choose an animal.", key="ANIMAL_CHOICE_DESCRIPTION"
            ),
            choices={
                "–õ–∏—Å–∞": "fox",
                "–ï–Ω–æ—Ç": "raccoon",
                "–ö–æ—à–∫–∞": "cat",
                "–°–æ–±–∞–∫–∞": "dog",
                "–ü—Ç–∏—Ü–∞": "bird",
                "–ö–µ–Ω–≥—É—Ä—É": "kangaroo",
                "–ö–æ–∞–ª–∞": "koala",
                "–ü–∞–Ω–¥–∞": "panda",
            },
        ),
    ):
        try:
            await inter.response.defer(ephemeral=False)
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://some-random-api.com/animal/{animal}"
                ) as resp:
                    data = await resp.json()

            word = data["fact"]
            fact = await translator(word, "ru")
            embed = disnake.Embed(
                description=f"**–§–∞–∫—Ç:** {fact}", color=self.color.MAIN
            )
            embed.set_image(url=data["image"])
            await inter.edit_original_message(embed=embed)
        except Exception as e:
            raise CustomError("–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")


def setup(bot):
    bot.add_cog(Fun(bot))
