import disnake
import random

from disnake.ext import commands
from utils import database, main, enums, constant, paginator, RankCard, Settings, checks
from PIL import ImageColor


class CasinoView(disnake.ui.View):
    message: disnake.Message
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.economy = main.EconomySystem(self.bot)
        super().__init__(timeout=120.0)

    async def on_timeout(self):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=self)

    @disnake.ui.button(
        label="–ú–æ–Ω–µ—Ç–∫–∞", 
        emoji="ü™ô", 
        custom_id="coin", 
        style=disnake.ButtonStyle.primary
    )
    async def coin_button_callback(self, button, inter):
        return await self.economy.coin_frame(inter, view=CoinButtons(inter))

    @disnake.ui.button(
        label="–ö–µ–π—Å—ã", 
        emoji="üì¶", 
        custom_id="case", 
        style=disnake.ButtonStyle.primary
    )
    async def case_button_callback(self, button, inter):
        return await self.economy.case_frame(inter, view=CaseButtons(inter))

    @disnake.ui.button(
        label="–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±", 
        emoji="üëä", 
        custom_id="fightclub", 
        style=disnake.ButtonStyle.primary
    )
    async def bk_button_callback(self, button, inter):
        return await self.economy.fight_club_frame(inter, view=FightButton(inter))

class CoinButtons(disnake.ui.View):
    message: disnake.Message
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.economy = main.EconomySystem(self.bot)
        super().__init__(timeout=120.0)

    async def on_timeout(self):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=self)

    @disnake.ui.button(
        label="–û—Ä—ë–ª", 
        emoji="ü™ô", 
        style=disnake.ButtonStyle.primary
    )
    async def orel_button_callback(self, button, inter):
        return await self.economy.coin_button_callback(inter, view=ReturnCoinButtons(inter))

    @disnake.ui.button(
        label="–†–µ—à–∫–∞", 
        emoji="ü™ô", 
        style=disnake.ButtonStyle.primary
    )
    async def reshka_button_callback(self, button, inter):
        return await self.economy.coin_button_callback(inter, view=ReturnCoinButtons(inter))

    @disnake.ui.button(
        label="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", 
        emoji="üí†", 
        style=disnake.ButtonStyle.success
    )
    async def change_bit_button_callback(self, button, inter):
        await inter.response.send_modal(modal=InputBit(self.bot))

    @disnake.ui.button(
        label="–í–µ—Ä–Ω—É—Ç—å—Å—è", 
        emoji="üëà", 
        custom_id="back", 
        style=disnake.ButtonStyle.gray
    )
    async def back_button_callback(self, button, inter):
        pass

class InputBit(disnake.ui.Modal):
    message: disnake.Message
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.otheremojis = constant.OtherEmojis()
        self.economy = main.EconomySystem(self.bot)
        components=[
            disnake.ui.TextInput(
                label="–°—Ç–∞–≤–∫–∞", 
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É", 
                custom_id="bit", 
                style=disnake.TextInputStyle.short, 
                max_length=50,
            )
        ]
        super().__init__(title="–û—Ä—ë–ª-—Ä–µ—à–∫–∞", components=components, custom_id="money_amount")

    async def callback(self, inter: disnake.ModalInteraction):
        try:
            check = int(inter.text_values["bit"])
            if check > 10:
                return await inter.response.edit_message(
                    embed=self.economy.COIN_FRAME.set_field_at(index=0, value=str(check), name="–°—Ç–∞–≤–∫–∞")
                )

            await inter.send(
                embed = disnake.Embed(
                    title=f"{self.otheremojis.WARNING} –û—à–∏–±–∫–∞!", 
                    description="**–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.**"), 
                ephemeral=True
            )
        except ValueError:
            return await inter.send(
                embed = disnake.Embed(
                    title=f"{self.otheremojis.WARNING} –û—à–∏–±–∫–∞!", 
                    description="**–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.**"), 
                ephemeral=True
            )

class FightButton(disnake.ui.View):
    message: disnake.Message
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.economy = main.EconomySystem(self.bot)
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=self)

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –Ω–æ–≥–∏", 
        emoji="ü¶µ", 
        custom_id="legs_hit", 
        style=disnake.ButtonStyle.primary
    )
    async def legs_button_callback(self, button, inter):
        return await self.economy.hit(inter, "—É–¥–∞—Ä –≤ –Ω–æ–≥–∏", view=ReturnFightClubButtons(inter))

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –∂–∏–≤–æ—Ç", 
        emoji="üëä", 
        custom_id="torso_hit", 
        style=disnake.ButtonStyle.primary
    )
    async def torso_button_callback(self, button, inter):
        return await self.economy.hit(inter, "—É–¥–∞—Ä –≤ –∂–∏–≤–æ—Ç", view=ReturnFightClubButtons(inter))

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É", 
        emoji="ü§ï", 
        custom_id="head_hit", 
        style=disnake.ButtonStyle.primary
    )
    async def head_button_callback(self, button, inter):
        return await self.economy.hit(inter, "—É–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É", view=ReturnFightClubButtons(inter))

    @disnake.ui.button(
        label="–í–µ—Ä–Ω—É—Ç—å—Å—è", 
        emoji="üëà", 
        custom_id="back", 
        style=disnake.ButtonStyle.gray
    )
    async def back_button_callback(self, button, inter):
        pass

class CaseButtons(disnake.ui.View):
    message: disnake.Message
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.economy = main.EconomySystem(self.bot)
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=self)

    @disnake.ui.button(
        label=f"–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (10 FC)", #{self.economy.CURRENCY_NAME[:-28]} 
        #emoji=self.economy.CURRENCY_EMOJI, 
        custom_id="open_case", 
        style=disnake.ButtonStyle.success
    )
    async def open_case_button_callback(self, button, inter):
        return await self.economy.open_case_callback(inter, view=ReopenCaseButtons(inter))

    @disnake.ui.button(
        label="–í–µ—Ä–Ω—É—Ç—å—Å—è", 
        emoji="üëà", 
        custom_id="back", 
        style=disnake.ButtonStyle.gray
    )
    async def back_button_callback(self, button, inter):
        pass

class ReopenCaseButtons(disnake.ui.View):
    message: disnake.Message
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.economy = main.EconomySystem(self.bot)
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=self)

    @disnake.ui.button(
        label="–í–µ—Ä–Ω—É—Ç—å—Å—è", 
        emoji="üëà", 
        custom_id="back_to_case", 
        style=disnake.ButtonStyle.gray
    )
    async def back_to_case_button_callback(self, button, inter):
        return await self.economy.case_frame(inter, view=CaseButtons(inter))

class ReturnFightClubButtons(disnake.ui.View):
    message: disnake.Message
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.economy = main.EconomySystem(self.bot)
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=self)

    @disnake.ui.button(
        label="–í–µ—Ä–Ω—É—Ç—å—Å—è", 
        emoji="üëà", 
        custom_id="back_to_fight_club", 
        style=disnake.ButtonStyle.gray
    )
    async def back_to_fightclub_button_callback(self, button, inter):
        return await self.economy.fight_club_frame(inter, view=FightButton(inter))

class ReturnCoinButtons(disnake.ui.View):
    message: disnake.Message
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.economy = main.EconomySystem(self.bot)
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=self)

    @disnake.ui.button(
        label="–í–µ—Ä–Ω—É—Ç—å—Å—è", 
        emoji="üëà", 
        custom_id="back_to_coin", 
        style=disnake.ButtonStyle.gray
    )
    async def back_to_coin_button_callback(self, button, inter):
        return await self.economy.coin_frame(inter, view=CoinButtons(inter))


class Economy(commands.Cog, name="–≠–∫–æ–Ω–æ–º–∏–∫–∞"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.main = main.MainSettings()
        self.economy = main.EconomySystem(self.bot)
        self.db = database.DataBase()
        self.color = enums.Color()
        self.otheremojis = constant.OtherEmojis()
        self.checks = checks.Checks(self.bot)
        self.profile = constant.ProfileEmojis()

    @commands.Cog.listener("on_button_click")
    async def help_listener(self, inter):
        if inter.component.custom_id == "back":
            return await self.economy.casino_frame(inter, view=CasinoView(self.bot))

    @commands.slash_command(
        name="–∫–∞–∑–∏–Ω–æ", 
        description="–ú–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –ø—Ä–æ–≤–µ–¥—ë—Ç–µ –≤—Ä–µ–º—è —Å –∫–∞–π—Ñ–æ–º.", 
        dm_permission=False,
    )
    async def casino_menu(self, inter: disnake.ApplicationCommandInteraction):
        return await self.economy.casino_frame(inter, view=CasinoView(self.bot))

    @commands.slash_command(
        name="–±–∞–ª–∞–Ω—Å",
        description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 15, commands.BucketType.user)
    async def user_balance(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author, name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
    ):
        await inter.response.defer()
        data = await self.db.get_data(member)

        if (
            not member
        ):  # –µ—Å–ª–∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            member = inter.author

        embed = disnake.Embed(
            description=f"–ë–∞–ª–∞–Ω—Å {member.mention} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{data['balance']} {self.economy.CURRENCY_NAME}**\n"
            f"–£—Ä–æ–≤–µ–Ω—å: **{data['level']}** (XP: **{data['xp']}/{500 + 100 * data['level']}**)",
            color=self.color.MAIN,
        )
        embed.set_author(name=f"–ë–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞", icon_url=member.display_avatar.url)
        embed.set_footer(text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR)
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="—Ä–∞–Ω–≥",
        description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 30, commands.BucketType.user)
    async def user_rank(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author, name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
    ):
        await inter.response.defer()

        if (
            not member
        ):  # –µ—Å–ª–∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            member = inter.author

        user = await self.bot.fetch_user(member.id)
        data = await self.db.get_data(member)
        if member.top_role == member.guild.default_role:
            hex_color = "#A53143"
        else:
            hex_color = ImageColor.getcolor(str(member.top_role.color), "RGB")
            hex_color = "#{0:02x}{1:02x}{2:02x}".format(*hex_color)

        card_settings = Settings(
            background="https://e0.pxfuel.com/wallpapers/793/114/desktop-wallpaper-haikyuu-kozume-kenma-kageyama-tobio-azumane-asahi-nishinoya-yuu.jpg",
            background_color="#000000",
            text_color="white",
            bar_color="#e39e7e",
        )
        rank = RankCard(
            settings=card_settings,
            avatar=user.display_avatar.url,
            status=member.status,
            level=data["level"],
            current_exp=data["xp"],
            max_exp=500 + 100 * data["level"],
            username=f"@{user.name}",
        )
        image = await rank.card()
        await inter.edit_original_message(file=disnake.File(image, filename="rank.png"))

    @commands.slash_command(
        name="–ø–µ—Ä–µ–≤–µ—Å—Ç–∏",
        description="–ü–µ—Ä–µ–≤–µ–≤–æ–¥–∏—Ç –¥–µ–Ω—å–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 15, commands.BucketType.user)
    async def pay_cash(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        amount: int = commands.Param(
            name="—Å—É–º–º–∞", description="C—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É"
        ),
    ):
        data = await self.db.get_data(inter.author)
        if amount is None:
            return await self.checks.check_amount_is_none(inter)

        if member == inter.author:
            return await self.checks.check_user_author(
                inter, text=f"–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ **{self.economy.CURRENCY_NAME}**"
            )

        if amount > data["balance"]:
            return await self.checks.check_unknown(
                inter,
                text=f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ **{self.economy.CURRENCY_NAME}** –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!",
            )

        if amount <= 0:
            return await self.checks.check_unknown(
                inter, text=f"—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ **1 {self.economy.CURRENCY_NAME}**!"
            )

        else:
            await inter.response.defer(ephemeral=False)
            embed = disnake.Embed(
                description=f"{inter.author.mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ **{amount} {self.economy.CURRENCY_NAME}** —É—á–∞—Å—Ç–Ω–∏–∫—É {member.mention}!",
                color=self.color.MAIN,
            )
            embed.set_author(
                name="–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ —É—á–∞—Å—Ç–Ω–∏–∫—É", icon_url=member.display_avatar.url
            )
            embed.set_footer(
                text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR
            )
            await self.db.update_member(
                "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
                [amount, inter.author.id, inter.guild.id],
            )
            await self.db.update_member(
                "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                [amount, member.id, inter.guild.id],
            )
            await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="–ª–∏–¥–µ—Ä—ã", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —á–µ–º—É-—Ç–æ.", dm_permission=False,
    )
    async def leadersboard(self, inter: disnake.ApplicationCommandInteraction):
        pass

    @leadersboard.sub_command(
        name="–±–∞–ª–∞–Ω—Å",
        description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É.",
    )
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def server_leadersboard_balance(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)

        data = await self.db.get_data(
            inter.guild.id, all_data=True, filters="ORDER BY balance DESC"
        )
        embeds = []
        counter = 0
        current_embed = disnake.Embed(
            description=f"üëë –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {inter.guild.name}!",
            color=self.color.MAIN,
        )

        for row in data:
            user = self.bot.get_user(row["member_id"])
            member = inter.guild.get_member(row["member_id"])
            if member is not None and not member.bot:
                if counter != 0 and counter % 5 == 0:
                    current_embed.set_author(
                        name=f"–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞",
                        icon_url=inter.guild.icon.url if inter.guild.icon else None,
                    )
                    current_embed.set_thumbnail(
                        url=inter.guild.icon.url if inter.guild.icon else None
                    )
                    embeds.append(current_embed)
                    current_embed = disnake.Embed(
                        description=f"üëë –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {inter.guild.name}!",
                        color=self.color.MAIN,
                    )

                counter += 1
                current_embed.add_field(
                    name=f"#{counter} | `{self.bot.get_user(row['member_id'])}`",
                    value=f"**–ë–∞–ª–∞–Ω—Å:** {row['balance']} {self.economy.CURRENCY_NAME}",
                    inline=False,
                )

        if counter % 5 != 0:
            current_embed.set_author(
                name=f"–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
            current_embed.set_thumbnail(
                url=inter.guild.icon.url if inter.guild.icon else None
            )
            embeds.append(current_embed)

        view = paginator.Paginator(embeds)
        view.message = await inter.edit_original_message(embed=embeds[0], view=view)

    @leadersboard.sub_command(
        name="–æ–ø—ã—Ç",
        description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–ø—ã—Ç—É.",
    )
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def server_leadersboard_level(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)

        data = await self.db.get_data(
            inter.guild.id, all_data=True, filters="ORDER BY level DESC"
        )
        embeds = []
        counter = 0
        current_embed = disnake.Embed(
            description=f"üëë –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {inter.guild.name}!",
            color=self.color.MAIN,
        )

        for row in data:
            user = self.bot.get_user(row["member_id"])
            member = inter.guild.get_member(row["member_id"])
            if member is not None and not member.bot:
                if counter != 0 and counter % 5 == 0:
                    current_embed.set_author(
                        name=f"–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞",
                        icon_url=inter.guild.icon.url if inter.guild.icon else None,
                    )
                    current_embed.set_thumbnail(
                        url=inter.guild.icon.url if inter.guild.icon else None
                    )
                    embeds.append(current_embed)
                    current_embed = disnake.Embed(
                        description=f"üëë –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ–ø—ã—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {inter.guild.name}!",
                        color=self.color.MAIN,
                    )

                counter += 1
                current_embed.add_field(
                    name=f"#{counter} | `{self.bot.get_user(row['member_id'])}`",
                    value=f"**–£—Ä–æ–≤–µ–Ω—å:** {row['level']} | **–û–ø—ã—Ç:** {row['xp']}/{500 + 100 * row['level']}",
                    inline=False,
                )

        if counter % 5 != 0:
            current_embed.set_author(
                name=f"–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
            current_embed.set_thumbnail(
                url=inter.guild.icon.url if inter.guild.icon else None
            )
            embeds.append(current_embed)

        view = paginator.Paginator(embeds)
        view.message = await inter.edit_original_message(embed=embeds[0], view=view)

    @commands.slash_command(
        name="–º–∞–≥–∞–∑–∏–Ω", 
        description="–ú–∞–≥–∞–∑–∏–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å —Ä–æ–ª–∏.", 
        dm_permission=False,
    )
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def view_shop(self, inter):
        await inter.response.defer(ephemeral=False)
        counter = 0
        embed = disnake.Embed(
            description=f"–ö—É–ø–∏—Ç—å —Ä–æ–ª—å –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É </–∫—É–ø–∏—Ç—å—Ä–æ–ª—å:1046871804985213077> üíñ", 
            color=self.color.MAIN
        )

        data = await self.db.get_shop_data(inter.guild.id, all_data=True)
        for row in data:
            if inter.guild.get_role(row["role_id"]) is not None:
                counter += 1
                embed.add_field(
                    name=f"`–¢–æ–≤–∞—Ä #{counter}`",
                    value=f"**–†–æ–ª—å:** {inter.guild.get_role(row['role_id']).mention}\n"
                    f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {row['cost']} {self.economy.CURRENCY_NAME}",
                    inline=False
                )
            else:
                embed.add_field(
                    name="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ...",
                    value="–º–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.",
                    inline=False
                )

        embed.set_thumbnail(url=inter.guild.icon.url if inter.guild.icon else None)
        embed.set_author(
            name=f"–ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞ {inter.guild.name}", 
            icon_url=inter.guild.icon.url if inter.guild.icon else None
        )
        embed.set_footer(text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR)
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="—Å–ª–æ—Ç",
        description="–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç –º–∞—à–∏–Ω—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 15, commands.BucketType.user)
    async def slot(
        self,
        inter: disnake.ApplicationCommandInteraction,
        amount: int = commands.Param(
            name="—Å—É–º–º–∞", description="–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏–≥—Ä–∞—Ç—å"
        ),
    ):
        data = await self.db.get_data(inter.author)
        if amount > data["balance"]:
            return await self.checks.check_unknown(
                inter, text=f"—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∏–≥—Ä—ã!"
            )

        if amount < 10:
            return await self.checks.check_unknown(
                inter, text=f"—É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ **10 {self.economy.CURRENCY_NAME}**!"
            )

        if amount > 500:
            return await self.checks.check_unknown(
                inter,
                text=f"—Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ **500 {self.economy.CURRENCY_NAME}**!",
            )

        else:
            emojis = "üçéüçãüçâüçá"
            a = random.choice(emojis)
            b = random.choice(emojis)
            c = random.choice(emojis)
            d = random.choice(emojis)

            slotmachine = f"**‚†Ä‚†Ä  {a} {b} {c} {d}**"

            if a == b == c == d:
                await inter.response.defer(ephemeral=False)
                description = [
                    f"**–°—É–º–º–∞, –≤–Ω–µ—Å–µ–Ω–Ω–∞—è –≤ —Å–ª–æ—Ç —Å–æ—Å—Ç–∞–≤–∏–ª–∞: `{amount}` {self.economy.CURRENCY_NAME}**\n\n",
                    f"{inter.author.mention}, **–ø–æ—Ç—è–Ω—É–ª –∑–∞ —Ä—ã—á–∞–≥ –∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é:**\n\n",
                    f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n{slotmachine}\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n",
                    f"ü•≥ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–æ—Ä–≤–∞–ª–∏ –¥–∂–µ–∫–ø–æ—Ç –∏ –ø—Ä–µ—É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –≤ `5` —Ä–∞–∑! (–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {amount * 5} {self.economy.CURRENCY_NAME})**",
                ]
                await self.db.update_member(
                    "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                    [
                        amount * 5,
                        inter.author.id,
                        inter.guild.id,
                    ],
                )
            elif (a == b == c) or (b == c == d) or (a == b == d) or (a == c == d):
                await inter.response.defer(ephemeral=False)
                description = [
                    f"**–°—É–º–º–∞, –≤–Ω–µ—Å–µ–Ω–Ω–∞—è –≤ —Å–ª–æ—Ç —Å–æ—Å—Ç–∞–≤–∏–ª–∞: `{amount}` {self.economy.CURRENCY_NAME}**\n\n",
                    f"{inter.author.mention}, **–ø–æ—Ç—è–Ω—É–ª –∑–∞ —Ä—ã—á–∞–≥ –∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é:**\n\n",
                    f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n{slotmachine}\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n",
                    f"ü•≥ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏ –ø—Ä–µ—É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –≤ `2` —Ä–∞–∑–∞! (–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {amount * 2} {self.economy.CURRENCY_NAME})**",
                ]
                await self.db.update_member(
                    "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                    [
                        amount * 2,
                        inter.author.id,
                        inter.guild.id,
                    ],
                )

            else:
                await inter.response.defer(ephemeral=False)
                description = [
                    f"**–°—É–º–º–∞, –≤–Ω–µ—Å–µ–Ω–Ω–∞—è –≤ —Å–ª–æ—Ç —Å–æ—Å—Ç–∞–≤–∏–ª–∞: `{amount}` {self.economy.CURRENCY_NAME}**\n\n",
                    f"{inter.author.mention}, **–ø–æ—Ç—è–Ω—É–ª –∑–∞ —Ä—ã—á–∞–≥ –∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é:**\n\n",
                    f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n{slotmachine}\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n",
                    f"üò¢ **–£–≤—ã, –Ω–æ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, —Ç–µ–º —Å–∞–º—ã–º –ø–æ—Ç–µ—Ä—è–≤ {amount} {self.economy.CURRENCY_NAME}!**",
                ]
                await self.db.update_member(
                    "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
                    [
                        amount,
                        inter.author.id,
                        inter.guild.id,
                    ],
                )

            embed = disnake.Embed(description=f"".join(description), color=self.color.MAIN)
            embed.set_author(
                name="¬´–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞¬ª", icon_url=inter.author.display_avatar.url
            )
            embed.set_footer(
                text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR
            )
            await inter.edit_original_message(embed=embed)


def setup(bot):
    bot.add_cog(Economy(bot))
