import disnake
import random
import datetime

from disnake.ext import commands
from utils import main, enums, constant, checks, database


class Moderation(commands.Cog, name="–ú–æ–¥–µ—Ä–∞—Ü–∏—è"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.main = main.MainSettings()
        self.color = enums.Color()
        self.otheremojis = constant.OtherEmojis()
        self.checks = checks.Checks(self.bot)
        self.db = database.DataBase()

    @commands.slash_command(
        name="–º—å—é—Ç",
        description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥—É–º–∞—Ç—å –æ —Å–≤–æ—ë–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(moderate_members=True)
    @commands.default_member_permissions(moderate_members=True)
    async def timeout(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        time: str = commands.Param(
            name="–≤—Ä–µ–º—è",
            description="–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (–ü—Ä–∏–º–µ—Ä: 10–º, –≥–¥–µ —Å - —Å–µ–∫—É–Ω–¥—ã, –º - –º–∏–Ω—É—Ç—ã, —á - —á–∞—Å—ã, –¥ - –¥–Ω–∏)",
        ),
        reason: str = commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", name="–ø—Ä–∏—á–∏–Ω–∞", description="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
        ),
    ):
        d = time[-1:]
        timemute = int(time[:-1])

        if member == self.bot.user:
            return await self.checks.check_user_bot(
                inter, text="–≤—ã–¥–∞–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–∞—Ç–∞"
            )

        if member == inter.author:
            return await self.checks.check_user_author(
                inter, text="–≤—ã–¥–∞–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–∞—Ç–∞"
            )

        if member.top_role >= inter.author.top_role:
            return await self.checks.check_user_role(inter)

        if member.top_role >= inter.guild.me.top_role:
            return await self.checks.check_bot_role(inter)

        if member.current_timeout:
            return await self.checks.check_member_timeout(inter, member)

        if d == "s" or d == "—Å":
            if timemute > 2419000:
                return await self.checks.check_timeout_time(inter)

            else:
                return await self.checks.check_time_muted(inter, member, time, reason, send_to_member = True)

        if d == "m" or d == "–º":
            if timemute > 40320:
                return await self.checks.check_timeout_time(inter)

            else:
                return await self.checks.check_time_muted(inter, member, time, reason, send_to_member = True)

        if d == "h" or d == "—á":
            if timemute > 672:
                return await self.checks.check_timeout_time(inter)

            else:
                return await self.checks.check_time_muted(inter, member, time, reason, send_to_member = True)

        if d == "d" or d == "–¥":
            if timemute > 28:
                return await self.checks.check_timeout_time(inter)

            else:
                return await self.checks.check_time_muted(inter, member, time, reason, send_to_member = True)

    @commands.slash_command(
        name="—Ä–∞–∑–º—å—é—Ç",
        description="–°–Ω–∏–º–∞–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
        dm_permission=False,
    )
    @commands.has_permissions(moderate_members=True)
    @commands.default_member_permissions(moderate_members=True)
    async def untimeout(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        reason=commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", name="–ø—Ä–∏—á–∏–Ω–∞", description="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
        ),
    ):
        if member.current_timeout == None:
            return await self.checks.check_member_timeout(inter, member)

        else:
            return await self.checks.send_embed_punishment(
                inter, 
                member, 
                reason, 
                punish="ü•≥ –° —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—ã–ª–∞ —Å–Ω—è—Ç–∞ –∑–∞–≥–ª—É—à–∫–∞ —á–∞—Ç–∞", 
                set_author_punish="–í–∞–º –±—ã–ª–∞ —Å–Ω—è—Ç–∞ –∑–∞–≥–ª—É—à–∫–∞ —á–∞—Ç–∞",
                send_to_member = True,
            )

    @commands.slash_command(
        name="–∫–∏–∫",
        description="–ò–∑–≥–æ–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(kick_members=True)
    @commands.default_member_permissions(kick_members=True)
    async def kick(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        reason=commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", name="–ø—Ä–∏—á–∏–Ω–∞", description="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
        ),
    ):
        if member == self.bot.user:
            return await self.checks.check_user_bot(inter, text="–∫–∏–∫–Ω—É—Ç—å")

        if member == inter.author:
            return await self.checks.check_user_author(inter, text="–∫–∏–∫–Ω—É—Ç—å")

        if member.top_role >= inter.author.top_role:
            return await self.checks.check_user_role(inter)

        if member.top_role >= inter.guild.me.top_role:
            return await self.checks.check_bot_role(inter)

        else:
            return await self.checks.send_embed_punishment(
                inter,
                member,
                reason,
                punish="üí® –ö–∏–∫",
                set_author_punish="–í—ã –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã",
                send_to_member = True,
            )

    @commands.slash_command(
        name="–±–∞–Ω",
        description="–ò–∑–≥–æ–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(ban_members=True)
    @commands.default_member_permissions(ban_members=True)
    async def ban(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        reason=commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", name="–ø—Ä–∏—á–∏–Ω–∞", description="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
        ),
    ):
        if member == self.bot.user:
            return await self.checks.check_user_bot(inter, text="–≤—ã–¥–∞–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É")

        if member == inter.author:
            return await self.checks.check_user_author(
                inter, text="–≤—ã–¥–∞–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"
            )

        if member.top_role >= inter.author.top_role:
            return await self.checks.check_user_role(inter)

        if member.top_role >= inter.guild.me.top_role:
            return await self.checks.check_bot_role(inter)

        else:
            return await self.checks.send_embed_punishment(
                inter,
                member,
                reason,
                punish="üïØ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                set_author_punish="–í–∞–º –≤—ã–¥–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                send_to_member = True,
            )

    @commands.slash_command(
        name="—Ä–∞–∑–±–∞–Ω",
        description="–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ –µ–≥–æ ID, –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–≥—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(ban_members=True)
    @commands.default_member_permissions(ban_members=True)
    async def unban(
        self,
        inter: disnake.ApplicationCommandInteraction,
        user: disnake.User = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        reason=commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", name="–ø—Ä–∏—á–∏–Ω–∞", description="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
        ),
    ):
        if member == self.bot.user:
            return await self.checks.check_user_bot(inter, text="–≤—ã–¥–∞–≤–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É")

        if member == inter.author:
            return await self.checks.check_user_author(
                inter, text="–≤—ã–¥–∞–≤–∞—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É"
            )
        else:
            return await self.checks.send_embed_punishment(
                inter,
                member,
                reason,
                punish="ü•≥ –†–∞–∑–±–∞–Ω",
                set_author_punish="–í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                send_to_member = False,
            )

    @commands.slash_command(
        name="—Å–æ–∑–¥–∞—Ç—å—Ä–æ–ª—å",
        description="–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(administrator=True)
    @commands.default_member_permissions(administrator=True)
    async def create_role(
        self,
        inter: disnake.ApplicationCommandInteraction,
        name: str = commands.Param(name="–Ω–∞–∑–≤–∞–Ω–∏–µ", description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏."),
        color: disnake.Colour = commands.Param(name="—Ü–≤–µ—Ç", description="–¶–≤–µ—Ç —Ä–æ–ª–∏."),
    ):
        await inter.response.defer(ephemeral=True)
        guild = inter.guild
        role = await guild.create_role(name=name, colour=color)
        embed = disnake.Embed(
            description=f"–†–æ–ª—å {role.mention}, —Å —Ü–≤–µ—Ç–æ–º {color}, —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            timestamp=inter.created_at,
            color=role.color,
        )
        embed.set_author(
            name="–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", icon_url=inter.author.display_avatar.url
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="–≤—ã–¥–∞—Ç—å—Ä–æ–ª—å",
        description="–í—ã–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(administrator=True)
    @commands.default_member_permissions(administrator=True)
    async def getrole(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        role: disnake.Role = commands.Param(name="—Ä–æ–ª—å", description="–í—ã–±–æ—Ä —Ä–æ–ª–∏"),
    ):
        if role in member.roles:
            await inter.response.defer(ephemeral=True)
            embed = disnake.Embed(
                title=f"{self.otheremojis.WARNING} –û—à–∏–±–∫–∞!",
                description=f"{inter.author.mention}, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω–∞—è —Ä–æ–ª—å! (–†–æ–ª—å: {role.mention})",
                color=self.color.RED,
            )
            await inter.edit_original_message(embed=embed)

        if member == self.bot.user:
            return await self.checks.check_user_bot(inter, text=f"–≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª—å {role.mention}")

        if member.top_role >= inter.author.top_role:
            return await self.checks.check_user_role(inter)

        if member.top_role >= inter.guild.me.top_role:
            return await self.checks.check_bot_role(inter)

        else:
            await inter.response.defer(ephemeral=False)
            await member.add_roles(role)
            embed = disnake.Embed(
                description=f"**{inter.author.mention} –≤—ã–¥–∞–ª —Ä–æ–ª—å {role.mention} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}.**",
                timestamp=inter.created_at,
                color=role.color,
            )
            embed.set_thumbnail(url=member.display_avatar.url)
            embed.set_footer(
                text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR
            )
            await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="—Å–Ω—è—Ç—å—Ä–æ–ª—å",
        description="–°–Ω–∏–º–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(administrator=True)
    @commands.default_member_permissions(administrator=True)
    async def ungetrole(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        role: disnake.Role = commands.Param(name="—Ä–æ–ª—å", description="–í—ã–±–æ—Ä —Ä–æ–ª–∏"),
    ):
        if member == self.bot.user:
            return await self.checks.check_user_bot(inter, text=f"—Å–Ω–∏–º–∞—Ç—å —Ä–æ–ª—å {role.mention}")

        if member.top_role >= inter.author.top_role:
            return await self.checks.check_user_role(inter)

        if member.top_role >= inter.guild.me.top_role:
            return await self.checks.check_bot_role(inter)

        else:
            await inter.response.defer(ephemeral=False)
            await member.remove_roles(role)
            embed = disnake.Embed(
                description=f"**{inter.author.mention} —Å–Ω—è–ª —Ä–æ–ª—å {role.mention} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}.**",
                timestamp=inter.created_at,
                color=role.color,
            )
            embed.set_thumbnail(url=member.display_avatar.url)
            embed.set_footer(
                text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR
            )
            await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="–∑–∞–¥–µ—Ä–∂–∫–∞",
        description="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(manage_channels=True)
    @commands.default_member_permissions(manage_channels=True)
    async def setdelay(
        self,
        inter: disnake.ApplicationCommandInteraction,
        seconds: int = commands.Param(
            name="—Å–µ–∫—É–Ω–¥—ã", description="–í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
        ),
    ):
        if seconds == 0:
            await inter.response.defer(ephemeral=False)
            await inter.channel.edit(slowmode_delay=seconds)
            embed = disnake.Embed(
                description=f"{inter.author.mention} —É–±—Ä–∞–ª –∑–∞–¥–µ—Ä–∂–∫—É –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ!",
                color=self.color.MAIN,
                timestamp=inter.created_at,
            )
            embed.set_author(
                name="–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ", icon_url=inter.author.display_avatar.url
            )
            embed.set_footer(
                text="–ö–æ–º–∞–Ω–¥–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Discord —Å–µ—Ä–≤–µ—Ä–∞",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
            await inter.edit_original_message(embed=embed)

        else:
            await inter.response.defer(ephemeral=False)
            await inter.channel.edit(slowmode_delay=seconds)
            embed = disnake.Embed(
                description=f"{inter.author.mention} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É —á–∞—Ç–∞ –≤ **`{seconds}`** —Å–µ–∫—É–Ω–¥!",
                color=self.color.MAIN,
                timestamp=inter.created_at,
            )
            embed.set_author(
                name="–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ", icon_url=inter.author.display_avatar.url
            )
            embed.set_footer(
                text="–ö–æ–º–∞–Ω–¥–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Discord —Å–µ—Ä–≤–µ—Ä–∞",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
            await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="–æ—á–∏—Å—Ç–∏—Ç—å",
        description="–û—á–∏—â–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(manage_messages=True)
    @commands.default_member_permissions(manage_messages=True)
    async def clear(
        self,
        inter: disnake.ApplicationCommandInteraction,
        amount: int = commands.Param(
            name="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"
        ),
    ):
        await inter.response.defer(ephemeral=True)
        embed = disnake.Embed(
            description=f"{inter.author.mention}, –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ **{amount}** —Å–æ–æ–±—â–µ–Ω–∏–π(–µ)",
            color=self.color.MAIN,
        )
        embed.set_author(name="–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞", icon_url=inter.author.display_avatar.url)
        embed.set_footer(text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR)
        await inter.channel.purge(limit=int(amount))
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="–ø—Ä–µ–¥",
        description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(ban_members=True)
    @commands.default_member_permissions(ban_members=True)
    async def give_warn(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
        reason: str = commands.Param(
            lambda reason: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ", name="–ø—Ä–∏—á–∏–Ω–∞", description="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É"
        ),
    ):
        if member == self.bot.user:
            return await self.checks.check_user_bot(inter, text="–≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")

        if member == inter.author:
            return await self.checks.check_user_author(
                inter, text="–≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
            )

        if member.top_role >= inter.author.top_role:
            return await self.checks.check_user_role(inter)

        if member.top_role >= inter.guild.me.top_role:
            return await self.checks.check_bot_role(inter)
        else:
            warns_data = await self.db.get_warns(member)
            warns_count = warns_data["warns"]
            if warns_count >= 5:
                await self.db.remove_warns(member=member)
                return await self.checks.send_embed_punishment(
                    inter,
                    member,
                    reason="5/5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
                    punish=f"üïØ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                    set_author_punish=f"–í–∞–º –≤—ã–¥–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                    send_to_member = True,
                )
            else:
                return await self.checks.send_embed_punishment(
                    inter,
                    member,
                    reason,
                    punish=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ [{warns_count + 1}/5]",
                    set_author_punish=f"–í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ [{warns_count + 1}/5]",
                    send_to_member = True,
                )

    @commands.slash_command(
        name="–ø—Ä–µ–¥—ã",
        description="–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def member_warns(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author, name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
    ):
        await inter.response.defer(ephemeral=False)
        if (
            not member
        ):  # –µ—Å–ª–∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            member = inter.author

        warns_data = await self.db.get_warns(member)
        warns_count, reason = warns_data["warns"], warns_data["reason"]
        embed = disnake.Embed(
            description=f"–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: **{warns_count}/5**\n–ü—Ä–∏—á–∏–Ω–∞: **{reason}**" if warns_count > 0 else "**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.**",
            color=self.color.MAIN
        )
        embed.set_author(name=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {member.display_name}", icon_url=member.display_avatar.url)
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name="—Å–±—Ä–æ—Å–ø—Ä–µ–¥",
        description="–°–Ω–∏–º–∞–µ—Ç –≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É.",
        dm_permission=False,
    )
    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.has_permissions(ban_members=True)
    @commands.default_member_permissions(ban_members=True)
    async def remove_member_warns(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author, name="—É—á–∞—Å—Ç–Ω–∏–∫", description="–í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞"
        ),
    ):
        await inter.response.defer(ephemeral=False)
        if (
            not member
        ):  # –µ—Å–ª–∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            member = inter.author

        await self.db.remove_warns(member=member)
        embed = disnake.Embed(
            description=f"**‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {member.mention} –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.**",
            color=self.color.MAIN
        )
        embed.set_author(name=f"–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", icon_url=member.display_avatar.url)
        await inter.edit_original_message(embed=embed)

def setup(bot):
    bot.add_cog(Moderation(bot))
